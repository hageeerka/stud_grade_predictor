import gradio as gr
import matplotlib.pyplot as plt
import numpy as np
from io import BytesIO
import base64

# Login : password phone email
users_db = [
    {"login": "admin", "password": "admin123"},
    {"login": "NikitenkoNU", "password": "password", "type": "student", "phone": "89089053638",
     "email": "NikitenkoN@kuku.ru"},
    {"login": "KukushkinKL", "password": "lodka123", "type": "teacher", "phone": "88005553535",
     "email": "KukushkinKL@kuku.ru"},
    {"login": "LastochkaEB", "password": "last123", "type": "class_teacher", "phone": "88005553536",
     "email": "LastochkaEB@kuku.ru"},
    {"login": "OvalovaGP", "password": "store2323", "type": "director", "phone": "88005553537",
     "email": "OvalovaGP@kuku.ru"}]


def create_risk_chart():
    subjects = ['Русский язык', 'Алгебра', 'Физика', 'Геометрия',
                'Литература', 'Биология', 'Химия', 'ОБЖ']
    risk_levels = [2, 3, 4, 5, 3, 4, 5, 6]

    fig, ax = plt.subplots(figsize=(10, 5))
    colors = ['#ff6b6b' if x > 3 else '#ffb74d' for x in risk_levels]
    bars = ax.barh(subjects, risk_levels, color=colors)

    for bar in bars:
        width = bar.get_width()
        ax.text(width + 0.1, bar.get_y() + bar.get_height() / 2,
                f'{width}', ha='left', va='center')

    ax.set_xlim(0, 6)
    ax.set_xticks(np.arange(0, 7, 1))
    ax.set_xlabel('Уровень риска')
    ax.grid(axis='x', linestyle='--', alpha=0.7)
    plt.tight_layout()

    buf = BytesIO()
    plt.savefig(buf, format='png', dpi=80)
    plt.close()
    return f"data:image/png;base64,{base64.b64encode(buf.getvalue()).decode('utf-8')}"


risk_chart = create_risk_chart()


def create_class_chart():
    grades = ['Отлично', 'Хорошо', 'Удовлетворительно', 'Неудовлетворительно']
    counts = [8, 9, 10, 5]

    fig, ax = plt.subplots(figsize=(8, 4))
    bars = ax.bar(grades, counts, color=['#4CAF50', '#8BC34A', '#FFC107', '#F44336'])

    for bar in bars:
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width() / 2., height,
                f'{height}', ha='center', va='bottom')

    ax.set_ylabel('Количество учеников')
    ax.set_title('Статистика по 10Б классу')
    plt.tight_layout()

    buf = BytesIO()
    plt.savefig(buf, format='png', dpi=80)
    plt.close()
    return f"data:image/png;base64,{base64.b64encode(buf.getvalue()).decode('utf-8')}"


class_chart = create_class_chart()

custom_css = """
/* Главное меню */
.main-container {
    font-family: 'Segoe UI', sans-serif;
    padding: 40px;
    max-width: 1200px;
    margin: 0 auto;
}

.first-page {
    display: flex;
    flex-direction: column;
}

.main-text {
    font-size: 52px;
    font-weight: 800;
    color: #02033B;
    margin-bottom: 30px;
    line-height: 1.2;
}

.sub-text {
    font-size: 18px;
    color: #1B1E56;
    margin-bottom: 40px;
    max-width: 80%;
}

.start-button {
    background: linear-gradient(90deg, #FFCB52, #FCA024);
    border: none;
    border-radius: 50px;
    padding: 14px 28px;
    font-size: 19px;
    font-weight: 700;
    color: black;
    cursor: pointer;
    width: fit-content;
}

/* Стили для страницы входа */
.login-container {
    max-width: 400px;
    margin: 0 auto;
    padding: 40px;
}

.login-title {
    font-size: 24px;
    font-weight: 600;
    margin-bottom: 30px;
    text-align: center;
}

.login-input {
    width: 100%;
    padding: 12px;
    margin-bottom: 20px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
}

.login-button {
    width: 100%;
    padding: 12px;
    background-color: #000;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    margin-bottom: 15px;
}

.recovery-link {
    text-align: center;
    color: #000;
    text-decoration: underline;
    cursor: pointer;
    font-size: 14px;
    background: none !important;
    border: none !important;
}

/* Стили для страницы восстановления */
.recovery-container {
    max-width: 400px;
    margin: 0 auto;
    padding: 40px;
}

.recovery-title {
    font-size: 24px;
    font-weight: 600;
    margin-bottom: 15px;
    text-align: center;
}

.recovery-text {
    text-align: center;
    margin-bottom: 30px;
    font-size: 16px;
}

.recovery-input {
    width: 100%;
    padding: 12px;
    margin-bottom: 20px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
}

.recovery-button {
    width: 100%;
    padding: 12px;
    background-color: #000;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
}

.back-button {
    display: block;
    margin-top: 20px;
    text-align: center;
    color: #000;
    text-decoration: underline;
    cursor: pointer;
    font-size: 14px;
    background: none !important;
    border: none !important;
}

/* Стили для страницы информации */
.profile-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 40px;
}

.profile-title {
    font-size: 24px;
    font-weight: 600;
    margin-bottom: 20px;
}

.profile-section {
    margin-bottom: 30px;
}

.profile-divider {
    border-top: 1px solid #ddd;
    margin: 20px 0;
}

.analyze-button {
    background-color: #000;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 12px 24px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    margin: 20px 0;
    display: block;
    width: 100%;
}

.grades-table {
    width: 100%;
    border-collapse: collapse;
    margin: 20px 0;
}

.grades-table th, .grades-table td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: center;
}

.grades-table th {
    background-color: #f2f2f2;
}

.risk-chart-container {
    margin: 20px 0;
    width: 100%;
}

.risk-scale {
    display: flex;
    justify-content: space-between;
    width: 100%;
    max-width: 600px;
    margin: 10px auto 0;
}

.risk-scale-item {
    text-align: center;
    width: 25%;
}

.recommendations {
    background-color: #e8f5e9;
    padding: 15px;
    border-radius: 4px;
    margin-top: 20px;
}

/* Стили для страницы учителя */
.class-teacher-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 40px;
}

.class-teacher-title {
    font-size: 24px;
    font-weight: 600;
    margin-bottom: 20px;
}

.class-selector {
    display: flex;
    gap: 15px;
    margin-bottom: 20px;
}

.class-selector select, .class-selector input {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
}

.stats-container {
    margin: 20px 0;
}

.stats-scale {
    display: flex;
    justify-content: space-between;
    margin-top: 10px;
}

.student-list {
    margin: 15px 0;
    padding: 0;
    list-style-type: none;
}

.student-list li {
    padding: 8px 0;
    border-bottom: 1px solid #eee;
}

.risk-scale-numbers {
    display: flex;
    justify-content: space-between;
    width: 100px;
    margin: 10px 0;
}

footer {
    display: none !important;
}
"""


def show_home():
    return [
        gr.update(visible=True),  # home_page
        gr.update(visible=False),  # entry_page
        gr.update(visible=False),  # recovery_page
        gr.update(visible=False),  # student_page
        gr.update(visible=False)  # teacher_page
    ]


def show_entry():
    return [
        gr.update(visible=False),
        gr.update(visible=True),
        gr.update(visible=False),
        gr.update(visible=False),
        gr.update(visible=False)
    ]


def show_recovery():
    return [
        gr.update(visible=False),
        gr.update(visible=False),
        gr.update(visible=True),
        gr.update(visible=False),
        gr.update(visible=False)
    ]


def show_student():
    return [
        gr.update(visible=False),
        gr.update(visible=False),
        gr.update(visible=False),
        gr.update(visible=True),
        gr.update(visible=False)
    ]


def show_teacher():
    return [
        gr.update(visible=False),
        gr.update(visible=False),
        gr.update(visible=False),
        gr.update(visible=False),
        gr.update(visible=True)
    ]


def check_user(login, password):
    for user in users_db:
        if user["login"] == login and user["password"] == password:
            if user["type"] == "student":
                return show_student()
            elif user["type"] == "teacher":
                return show_teacher()
            elif user["type"] == "class_teacher":
                return show_teacher()
            elif user["type"] == "director":
                return show_teacher()
    raise gr.Error("Неверный логин или пароль")


def send_recovery(email_or_phone):
    return show_entry()


with gr.Blocks(css=custom_css, theme=gr.themes.Base()) as demo:
    with gr.Column(visible=True, elem_classes=["main-container"]) as home_page:
        gr.Markdown("""
        <div class="first-page">
            <div class="main-text">
                Система категоризации обучающихся<br>по уровням прогнозируемой успеваемости
            </div>
            <div class="sub-text">
                На основе данных об оценках, посещаемости и других показателях система определяет риск низкой успеваемости.
            </div>
        </div>
        """)
        start_btn = gr.Button("Начать работу!", elem_classes="start-button")

    with gr.Column(visible=False, elem_classes=["login-container"]) as entry_page:
        gr.Markdown("""<div class="login-title">Вход</div>""")
        login_input = gr.Textbox(label="", placeholder="Логин", elem_classes="login-input")
        password_input = gr.Textbox(label="", placeholder="Пароль", type="password", elem_classes="login-input")
        login_btn = gr.Button("Вход", elem_classes="login-button")
        recovery_btn_link = gr.Button("восстановить логин/пароль", elem_classes="recovery-link")

    with gr.Column(visible=False, elem_classes=["recovery-container"]) as recovery_page:
        gr.Markdown("""<div class="recovery-title">Восстановление логина/пароля</div>""")
        gr.Markdown(
            """<div class="recovery-text">Введите эл. почту или номер телефона, для отправки письма на вашу эл. почту</div>""")
        recovery_input = gr.Textbox(label="", placeholder="Эл.почта / Номер телефона", elem_classes="recovery-input")
        recovery_btn = gr.Button("Отправить", elem_classes="recovery-button")
        back_btn = gr.Button("Назад", elem_classes="back-button")

    with gr.Column(visible=False, elem_classes=["profile-container"]) as student_page:
        gr.Markdown("""<div class="profile-title">Информация о себе</div>""")

        with gr.Column(elem_classes="profile-section"):
            gr.Markdown("**ФИО**  \n**Класс**  \n**Литер класса**")
            gr.Markdown(
                "Нажмите 'Проанализировать' для начала анализа успеваемости и прогнозирования рисков по данным вашей учебы.")
            gr.Markdown("""<div class="profile-divider"></div>""")
            analyze_btn = gr.Button("Проанализировать", elem_classes="analyze-button")
            gr.Markdown("""<div class="profile-divider"></div>""")

        with gr.Column(elem_classes="profile-section"):
            gr.Markdown("### Ваша успеваемость")
            gr.HTML("""
            <table class="grades-table">
                <tr>
                    <th>Всего</th>
                    <th>Алгебра</th>
                    <th>Русский яз.</th>
                    <th>Геометрия</th>
                    <th>Литература</th>
                    <th>История</th>
                    <th>Физика</th>
                    <th>Химия</th>
                    <th>Биология</th>
                    <th>ОБЖ</th>
                </tr>
                <tr>
                    <td>4.04</td>
                    <td>3.10</td>
                    <td>2.82</td>
                    <td>3.95</td>
                    <td>4.1</td>
                    <td>5</td>
                    <td>3.17</td>
                    <td>4.67</td>
                    <td>4.58</td>
                    <td>6</td>
                </tr>
            </table>
            """)
            gr.Markdown("Ваша итоговая оценка:  \n- **Хорошо - 4**")
            gr.Markdown("""<div class="profile-divider"></div>""")

        with gr.Column(elem_classes="profile-section"):
            gr.Markdown("### Риски")
            gr.HTML(f"""
            <div class="risk-chart-container">
                <img src="{risk_chart}" class="risk-chart">
                <div class="risk-scale">
                    <div class="risk-scale-item">2</div>
                    <div class="risk-scale-item">3</div>
                    <div class="risk-scale-item">4</div>
                    <div class="risk-scale-item">5</div>
                </div>
            </div>
            """)
            gr.Markdown("""<div class="profile-divider"></div>""")

        with gr.Column(elem_classes="profile-section"):
            gr.Markdown("### Рекомендации")
            gr.Markdown(
                """<div class="recommendations">Подтяните знания в следующих предметах:  \n**Русский язык, Алгебра, Физика**</div>""")

        back_to_main_btn = gr.Button("Назад", elem_classes="back-button")

    with gr.Column(visible=False, elem_classes=["class-teacher-container"]) as teacher_page:
        gr.Markdown("""<div class="class-teacher-title">Информация о классе</div>""")

        with gr.Column():
            gr.Markdown("Выберите класс и предмет, который необходимо проанализировать.")

            with gr.Row(elem_classes="class-selector"):
                subject = gr.Dropdown(["Математика", "Русский язык", "Физика"], label="Предмет")
                class_num = gr.Number(label="Класс", value=10)
                class_letter = gr.Textbox(label="Литер класса", value="Б")

            analyze_btn_teacher = gr.Button("Проанализировать", elem_classes="analyze-button")
            gr.Markdown("""<div class="profile-divider"></div>""")

        with gr.Column(elem_classes="stats-container"):
            gr.Markdown("### Статистика по 10Б классу")
            gr.HTML(f"""
            <div>
                <img src="{class_chart}" style="width: 100%; max-width: 500px; margin: 0 auto; display: block;">
                <ul style="margin-top: 20px;">
                    <li><strong>8 - Отлично</strong></li>
                    <li><strong>9 - Хорошо</strong></li>
                    <li><strong>10 - Удовлетворительно</strong></li>
                    <li><strong>5 - Неудовлетворительно</strong></li>
                </ul>
                <p>Средняя оценка по классу: <strong>Хорошо - 4</strong></p>
            </div>
            """)
            gr.Markdown("""<div class="profile-divider"></div>""")

        with gr.Column():
            gr.Markdown("### Риски")
            gr.HTML("""
            <ul class="student-list">
                <li>Иванов И.О.</li>
                <li>Воронкова Н.П.</li>
                <li>Яблочкин Е.Б.</li>
                <li>Галаниев Л.А.</li>
                <li>Чемяленко А.А.</li>
                <li>Виноградова В.С.</li>
                <li>Бананов А.К.</li>
                <li>Ананасова Е.М.</li>
            </ul>
            <div class="risk-scale-numbers">
                <span>2</span>
                <span>3</span>
                <span>4</span>
                <span>5</span>
            </div>
            """)
            gr.Markdown("""<div class="profile-divider"></div>""")

        with gr.Column():
            gr.Markdown("### Рекомендации")
            gr.Markdown("""
            <div class="recommendations">
                Подтяните знания у следующих учеников:<br>
                <strong>Иванов И.О., Воронкова Н.П., Яблочкин Е.Б., Галаниев Л.А., Чемяленко А.А.</strong>
            </div>
            """)

        back_btn_teacher = gr.Button("Назад", elem_classes="back-button")

    # Обработчики событий
    start_btn.click(show_entry, outputs=[home_page, entry_page, recovery_page, student_page, teacher_page])
    login_btn.click(check_user, inputs=[login_input, password_input],
                    outputs=[home_page, entry_page, recovery_page, student_page, teacher_page])
    recovery_btn_link.click(show_recovery, outputs=[home_page, entry_page, recovery_page, student_page, teacher_page])
    recovery_btn.click(send_recovery, inputs=[recovery_input],
                       outputs=[home_page, entry_page, recovery_page, student_page, teacher_page])
    back_btn.click(show_entry, outputs=[home_page, entry_page, recovery_page, student_page, teacher_page])
    back_to_main_btn.click(show_home, outputs=[home_page, entry_page, recovery_page, student_page, teacher_page])
    back_btn_teacher.click(show_entry, outputs=[home_page, entry_page, recovery_page, student_page, teacher_page])
    analyze_btn.click(lambda: None)
    analyze_btn_teacher.click(lambda: None)

demo.launch(share=False)
